7eebe8e5ac3e37ba19072ec4f20daf22
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Grid = _interopRequireWildcard(require("../Grid"));

var _styles = _interopRequireWildcard(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Input = function Input(props) {
  var _React$useState = _react["default"].useState(props.value),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      value = _React$useState2[0],
      handleChange = _React$useState2[1];

  var _React$useState3 = _react["default"].useState(true),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      inputValid = _React$useState4[0],
      setInputInvalid = _React$useState4[1];

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_styles["default"], {
    id: props.id,
    type: props.type,
    placeholder: props.placeholder,
    disabled: props.disabled || props.loading,
    error: props.error || !inputValid,
    loading: props.loading,
    success: props.success,
    autoFocus: props.autoFocus,
    value: value,
    onChange: function onChange(e) {
      handleChange(e.currentTarget.value);

      if (e.currentTarget.value) {
        setInputInvalid(e.currentTarget.value.match(props.test));
      } else {
        setInputInvalid(true);
      }
    },
    onKeyUp: function onKeyUp(e) {
      if (e.key === "Enter") {
        inputValid && props.onEvent({
          data: {
            value: value,
            data: props.data
          },
          event: "onKeyUpAction",
          origin: "Input"
        });
      } else {
        handleChange(e.currentTarget.value);
        inputValid && props.onEvent({
          data: {
            value: e.currentTarget.value,
            data: props.data
          },
          event: "onKeyUp",
          origin: "Input"
        });
      }
    },
    onFocus: function onFocus() {
      inputValid && props.onEvent({
        data: {
          value: value,
          data: props.data
        },
        event: "onFocus",
        origin: "Input"
      });
    },
    onBlur: function onBlur() {
      inputValid && props.onEvent({
        data: {
          value: value,
          key: props.data
        },
        event: "onBlur",
        origin: "Input"
      });
    }
  }), props.loading && /*#__PURE__*/_react["default"].createElement(_styles.StyledIconLoading, null), (props.error || !inputValid) && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_styles.StyledIconError, null), /*#__PURE__*/_react["default"].createElement(_styles.StyledErrorMessage, null, !inputValid ? props.testMessage : props.error)));
};

Input.defaultProps = {
  type: "text",
  testMessage: "",
  disabled: false,
  loading: false,
  placeholder: '',
  onEvent: function onEvent() {}
};
Input.propTypes = {
  disabled: _propTypes["default"].bool,
  test: _propTypes["default"].any,
  loading: _propTypes["default"].bool,
  placeholder: _propTypes["default"].string,
  type: _propTypes["default"].string,
  testMessage: _propTypes["default"].string,
  value: _propTypes["default"].string.isRequired,
  onEvent: _propTypes["default"].func,
  data: _propTypes["default"].object
};
var _default = Input;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,